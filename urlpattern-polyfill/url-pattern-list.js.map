{"version":3,"file":"url-pattern-list.js","sourceRoot":"","sources":["../src/url-pattern-list.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAG3C,MAAM,OAAO,cAAc;IAGzB,YAAY,IAAkB,EAAE,OAAO,GAAG,EAAE;QAFpC,aAAQ,GAAsB,EAAE,CAAC;QAGvC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxB,MAAM,SAAS,CAAC,6CAA6C,CAAC,CAAC;SAChE;QAED,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1B,IAAI,SAAS,YAAY,UAAU,EAAE;YACnC,KAAK,IAAI,OAAO,IAAI,IAAI,EAAE;gBACxB,IAAI,CAAC,CAAC,OAAO,YAAY,UAAU,CAAC,EAAE;oBACpC,MAAM,SAAS,CAAC,6CAA6C,CAAC,CAAC;iBAChE;gBACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC7B;SACF;aAAM;YACL,IAAI;gBACF,KAAK,IAAI,WAAW,IAAI,IAAI,EAAE;oBAC5B,IAAI,IAAI,GAAG,EAAE,CAAC;oBACd,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;wBACnC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,WAAW,CAAC,CAAC;qBAC/D;yBAAM,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;wBAC1C,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC;qBAC/E;yBAAM;wBACL,MAAM,IAAI,SAAS,CAAC,uCAAuC,CAAC,CAAC;qBAC9D;oBAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;iBAC1C;aACF;YAAC,MAAM;gBACN,MAAM,IAAI,SAAS,CAAC,uCAAuC,CAAC,CAAC;aAC9D;SACF;IACH,CAAC;IAED,IAAI,CAAC,GAAW;QACd,IAAI;YACF,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,+BAA+B;SAC9C;QAAC,MAAM;YACN,OAAO,KAAK,CAAC;SACd;QAED,KAAK,IAAI,UAAU,IAAI,IAAI,CAAC,QAAQ,EAAE;YACpC,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;gBACxB,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,CAAC,GAAW;QACd,IAAI;YACF,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,+BAA+B;SAC9C;QAAC,MAAM;YACN,OAAO,IAAI,CAAC;SACb;QAED,KAAK,IAAI,UAAU,IAAI,IAAI,CAAC,QAAQ,EAAE;YACpC,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnC,IAAI,KAAK,EAAE;gBACT,OAAO,KAAK,CAAC;aACd;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["import { parseShorthand } from './parseShorthand';\r\nimport { URLPattern } from './url-pattern';\r\nimport { URLPatternComponentResult } from './url-pattern.interfaces';\r\n\r\nexport class URLPatternList {\r\n  private patterns: Array<URLPattern> = [];\r\n\r\n  constructor(list: URLPattern[], options = {}) {\r\n    if (!Array.isArray(list)) {\r\n      throw TypeError('parameter list must be if type URLPattern[]');\r\n    }\r\n\r\n    const firstItem = list[0];\r\n    if (firstItem instanceof URLPattern) {\r\n      for (let pattern of list) {\r\n        if (!(pattern instanceof URLPattern)) {\r\n          throw TypeError('parameter list must be if type URLPattern[]');\r\n        }\r\n        this.patterns.push(pattern);\r\n      }\r\n    } else {\r\n      try {\r\n        for (let patternInit of list) {\r\n          let init = {};\r\n          if (typeof patternInit === 'object') {\r\n            init = Object.assign(Object.assign({}, options), patternInit);\r\n          } else if (typeof patternInit === 'string') {\r\n            init = Object.assign(Object.assign({}, options), parseShorthand(patternInit));\r\n          } else {\r\n            throw new TypeError('List contains no parsable information');\r\n          }\r\n\r\n          this.patterns.push(new URLPattern(init));\r\n        }\r\n      } catch {\r\n        throw new TypeError('List contains no parsable information');\r\n      }\r\n    }\r\n  }\r\n\r\n  test(url: string) {\r\n    try {\r\n      new URL(url); // allows string or URL object.\r\n    } catch {\r\n      return false;\r\n    }\r\n\r\n    for (let urlPattern of this.patterns) {\r\n      if (urlPattern.test(url)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  exec(url: string): URLPatternComponentResult | null | number {\r\n    try {\r\n      new URL(url); // allows string or URL object.\r\n    } catch {\r\n      return null;\r\n    }\r\n\r\n    for (let urlPattern of this.patterns) {\r\n      const value = urlPattern.exec(url);\r\n      if (value) {\r\n        return value;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}"]}