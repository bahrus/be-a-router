{"version":3,"file":"url-pattern.js","sourceRoot":"","sources":["../src/url-pattern.ts"],"names":[],"mappings":"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","sourcesContent":["import {parseShorthand} from './parseShorthand';\r\nimport {ParseOptions, pathToRegexp, TokensToRegexpOptions} from './path-to-regex-6.2';\r\nimport {URLPatternComponentResult, URLPatternInit, URLPatternKeys} from './url-pattern.interfaces';\r\nimport {\r\n  canonicalizeHash,\r\n  canonicalizeHostname,\r\n  canonicalizePassword,\r\n  canonicalizePathname,\r\n  canonicalizePort,\r\n  canonicalizeProtocol,\r\n  canonicalizeSearch,\r\n  canonicalizeUsername,\r\n  defaultPortForProtocol,\r\n  isAbsolutePathname,\r\n} from './url-utils';\r\n\r\n// The default wildcard pattern used for a component when the constructor\r\n// input does not provide an explicit value.\r\nconst DEFAULT_PATTERN = '(.*)';\r\n\r\n// The default wildcard pattern for the pathname component.\r\nconst DEFAULT_PATHNAME_PATTERN = '/(.*)';\r\n\r\n// default to strict mode and case sensitivity.  In addition, most\r\n// components have no concept of a delimiter or prefix character.\r\nconst DEFAULT_OPTIONS: TokensToRegexpOptions & ParseOptions = {\r\n  delimiter: '',\r\n  prefixes: '',\r\n  sensitive: true,\r\n  strict: true,\r\n};\r\n\r\n// The options to use for hostname patterns.  This uses a\r\n// \".\" delimiter controlling how far a named group like \":bar\" will match\r\n// by default.  Note, hostnames are case insensitive but we require case\r\n// sensitivity here.  This assumes that the hostname values have already\r\n// been normalized to lower case as in URL().\r\nconst HOSTNAME_OPTIONS: TokensToRegexpOptions & ParseOptions = {\r\n  delimiter: '.',\r\n  prefixes: '',\r\n  sensitive: true,\r\n  strict: true,\r\n};\r\n\r\n// The options to use for pathname patterns.  This uses a\r\n// \"/\" delimiter controlling how far a named group like \":bar\" will match\r\n// by default.  It also configures \"/\" to be treated as an automatic\r\n// prefix before groups.\r\nconst PATHNAME_OPTIONS: TokensToRegexpOptions & ParseOptions = {\r\n  delimiter: '/',\r\n  prefixes: '/',\r\n  sensitive: true,\r\n  strict: true,\r\n};\r\n\r\nfunction extractValues(url: string): URLPatternInit {\r\n  if (typeof url !== \"string\") {\r\n    throw new TypeError(`parameter 1 is not of type 'string'.`);\r\n  }\r\n  const o = new URL(url); // May throw.\r\n  return {\r\n    protocol: o.protocol.substring(0, o.protocol.length - 1),\r\n    username: o.username,\r\n    password: o.password,\r\n    hostname: o.hostname,\r\n    port: o.port,\r\n    pathname: o.pathname,\r\n    search: o.search != '' ? o.search.substring(1, o.search.length) : undefined,\r\n    hash: o.hash != '' ? o.hash.substring(1, o.hash.length) : undefined,\r\n  };\r\n}\r\n\r\n// A utility method that takes a URLPatternInit, splits it apart, and applies\r\n// the individual component values in the given set of strings.  The strings\r\n// are only applied if a value is present in the init structure.\r\nfunction applyInit(o: URLPatternInit, init: URLPatternInit, isPattern: boolean): URLPatternInit {\r\n  // If there is a baseURL we need to apply its component values first.  The\r\n  // rest of the URLPatternInit structure will then later override these\r\n  // values.  Note, the baseURL will always set either an empty string or\r\n  // longer value for each considered component.  We do not allow null strings\r\n  // to persist for these components past this phase since they should no\r\n  // longer be treated as wildcards.\r\n  let baseURL;\r\n  if (init.baseURL) {\r\n    try {\r\n      baseURL = new URL(init.baseURL);\r\n      o.protocol = baseURL.protocol ? baseURL.protocol.substring(0, baseURL.protocol.length - 1) : '';\r\n      o.username = baseURL.username;\r\n      o.password = baseURL.password;\r\n      o.hostname = baseURL.hostname;\r\n      o.port = baseURL.port;\r\n      o.pathname = baseURL.pathname ? baseURL.pathname : '/';\r\n      // Do no propagate search or hash from the base URL.  This matches the\r\n      // behavior when resolving a relative URL against a base URL.\r\n    } catch {\r\n      throw new TypeError(`invalid baseURL '${init.baseURL}'.`);\r\n    }\r\n  }\r\n\r\n  // Apply the URLPatternInit component values on top of the default and\r\n  // baseURL values.\r\n  if (init.protocol) o.protocol = canonicalizeProtocol(init.protocol, isPattern);\r\n  if (init.username) o.username = canonicalizeUsername(init.username, isPattern);\r\n  if (init.password) o.password = canonicalizePassword(init.password, isPattern);\r\n  if (init.hostname) o.hostname = canonicalizeHostname(init.hostname, isPattern);\r\n  if (init.port) o.port = canonicalizePort(init.port, isPattern);\r\n\r\n  if (init.pathname) {\r\n    o.pathname = init.pathname;\r\n    if (baseURL && !isAbsolutePathname(o.pathname, isPattern)) {\r\n      // Find the last slash in the baseURL pathname.  Since the URL is\r\n      // hierarchical it should have a slash to be valid, but we are cautious\r\n      // and check.  If there is no slash then we cannot use resolve the\r\n      // relative pathname and just treat the init pathname as an absolute\r\n      // value.\r\n      const slashIndex = baseURL.pathname.lastIndexOf('/');\r\n      if (slashIndex >= 0) {\r\n        // Extract the baseURL path up to and including the first slash.\r\n        // Append the relative init pathname to it.\r\n        o.pathname = baseURL.pathname.substring(0, slashIndex + 1) + o.pathname;\r\n      }\r\n    }\r\n    o.pathname = canonicalizePathname(o.pathname, isPattern);\r\n  }\r\n  if (init.search) o.search = canonicalizeSearch(init.search, isPattern);\r\n  if (init.hash) o.hash = canonicalizeHash(init.hash, isPattern);\r\n\r\n  return o;\r\n}\r\n\r\nexport class URLPattern {\r\n  private pattern: URLPatternInit;\r\n  private regexp: any = {};\r\n  private keys: any = {};\r\n\r\n  constructor(init: URLPatternInit | string, baseURL?: string) {\r\n    try {\r\n      // shorthand\r\n      if (typeof init === 'string') {\r\n        init = parseShorthand(init);\r\n        if (baseURL) {\r\n          if (typeof baseURL === 'string') {\r\n            init.baseURL = baseURL;\r\n          } else {\r\n            throw new TypeError(`'baseURL' parameter is not of type 'string'.`);\r\n          }\r\n        }\r\n      }\r\n      // no or invalid arguments\r\n      if (!init || typeof init !== 'object') {\r\n        throw new TypeError(`parameter 1 is not of type 'string' and cannot convert to dictionary.`);\r\n      }\r\n\r\n      const defaults = {\r\n        pathname: DEFAULT_PATHNAME_PATTERN,\r\n        protocol: DEFAULT_PATTERN,\r\n        username: DEFAULT_PATTERN,\r\n        password: DEFAULT_PATTERN,\r\n        hostname: DEFAULT_PATTERN,\r\n        port: DEFAULT_PATTERN,\r\n        search: DEFAULT_PATTERN,\r\n        hash: DEFAULT_PATTERN,\r\n      };\r\n\r\n      this.pattern = applyInit(defaults, init, true);\r\n      let component: URLPatternKeys;\r\n      for (component in this.pattern) {\r\n        let options;\r\n        const pattern = this.pattern[component];\r\n        this.keys[component] = [];\r\n        switch (component) {\r\n          case 'hostname':\r\n            options = HOSTNAME_OPTIONS;\r\n            break;\r\n          case 'pathname':\r\n            options = PATHNAME_OPTIONS;\r\n            break;\r\n          default:\r\n            options = DEFAULT_OPTIONS;\r\n        }\r\n        try {\r\n          this.regexp[component] = pathToRegexp(pattern as string, this.keys[component], options);\r\n        } catch {\r\n          // If a pattern is illegal the constructor will throw an exception\r\n          throw new TypeError(`invalid ${component} pattern '${this.pattern[component]}'.`);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      throw new TypeError(`Failed to construct 'URLPattern': ${err.message}`);\r\n    }\r\n  }\r\n\r\n  test(input: string) {\r\n    let values: URLPatternInit = {};\r\n\r\n    if (typeof input === 'undefined') {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      if (typeof input === 'object') {\r\n        values = applyInit(values, input, false);\r\n      } else {\r\n        values = applyInit(values, extractValues(input), false);\r\n      }\r\n    } catch (err) {\r\n      // Treat exceptions simply as a failure to match.\r\n      console.error(err.message);\r\n      return false;\r\n    }\r\n\r\n    let component:URLPatternKeys\r\n    for (component in this.pattern) {\r\n      let match;\r\n      let portMatchFix = component == 'port' && values.protocol && values.port === defaultPortForProtocol(values.protocol);\r\n      if (portMatchFix) {\r\n        match = this.regexp[component].exec('');\r\n      } else {\r\n        const fallback = component == 'pathname' ? '/' : '';\r\n        match = this.regexp[component].exec(values[component] || fallback);\r\n      }\r\n\r\n      if (!match) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  exec(input: string | URLPatternInit): URLPatternComponentResult | null | undefined {\r\n    let values = {} as URLPatternInit;\r\n\r\n    if (typeof input === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (typeof input === 'object') {\r\n        values = applyInit(values, input, false);\r\n      } else {\r\n        values = applyInit(values, extractValues(input), false);\r\n      }\r\n    } catch (err) {\r\n      // Treat exceptions simply as a failure to match.\r\n      console.error(err.message);\r\n      return null;\r\n    }\r\n\r\n    let result: URLPatternComponentResult | null = null;\r\n    let component: URLPatternKeys;\r\n    for (component in this.pattern) {\r\n      let match;\r\n      let portMatchFix = component == 'port' && values.protocol\r\n        && values.port === defaultPortForProtocol(values.protocol);\r\n\r\n      if (portMatchFix) {\r\n        match = this.regexp[component].exec('');\r\n      } else {\r\n        const fallback = component == 'pathname' ? '/' : '';\r\n        match = this.regexp[component].exec(values[component] || fallback);\r\n      }\r\n\r\n      let groups = {} as Array<string>;\r\n      if (!match) {\r\n        return null;\r\n      }\r\n\r\n      for (let [i, key] of this.keys[component].entries()) {\r\n        if (typeof key.name === 'string' || typeof key.name === 'number') {\r\n          let value = match[i + 1];\r\n          groups[key.name] = value || '';\r\n        }\r\n      }\r\n\r\n      if (!result) result = {};\r\n\r\n      result[component] = {\r\n        input: values[component] || '',\r\n        groups,\r\n      };\r\n\r\n      result.input = input;\r\n    }\r\n\r\n    return result;\r\n  }\r\n}"]}